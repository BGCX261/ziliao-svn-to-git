using System;
using System.Collections;


namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Prj_Network
	{

		#region Private Members

		private string m_networkaddress; 
		private IList m_PrjUnitList; 
		private string m_networkname; 
		private string m_description; 		
		#endregion

		#region Constuctor

		public Prj_Network()
		{
			m_networkaddress = String.Empty; 
			m_PrjUnitList = new ArrayList(); 
			m_networkname = String.Empty; 
			m_description = String.Empty; 
		}

		#region Public Properties
			
		public string NetworkAddress
		{
			get { return m_networkaddress; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for NetworkAddress", value, value.ToString());
				
				m_networkaddress = value;
			}
		}
			
		public PrjUnit[] PrjUnit
		{
			get
			{

				ArrayList readonlyarray = ArrayList.ReadOnly(new ArrayList(m_PrjUnitList));
				return (PrjUnit[]) readonlyarray.ToArray(typeof(PrjUnit));
			}
		}
						
		public string NetworkName
		{
			get { return m_networkname; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for NetworkName", value, value.ToString());
				
				m_networkname = value;
			}
		}
			
		public string Description
		{
			get { return m_description; }

			set	
			{	
				if(  value != null &&  value.Length > 0)
					throw new ArgumentOutOfRangeException("Invalid value for Description", value, value.ToString());
				
				m_description = value;
			}
		}
			
				
		#endregion 

		#region Private Accessors for NHibernate
		
		
		private string m_NetworkAddress
		{
			get { return m_networkaddress; }
			set { m_networkaddress = value; }
		}

		
		private string m_NetworkName
		{
			get { return m_networkname; }
			set { m_networkname = value; }
		}

		
		private string m_Description
		{
			get { return m_description; }
			set { m_description = value; }
		}

		#endregion // Internal Accessors for NHibernate 

		#region Public Functions

		public void AddPrjUnit(PrjUnit dados)
		{
			#region Sanity Check
			if (dados == null)
				throw new ArgumentNullException("dados", "Parâmetro não pode ser nulo");
			#endregion
			m_PrjUnitList.Add(dados);
		}
		

		#endregion //Public Functions

		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			Prj_Network castObj = (Prj_Network)obj; 
			return castObj.GetHashCode() == this.GetHashCode();
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return this.GetType().FullName.GetHashCode();
				
		}
		#endregion
			}
}
