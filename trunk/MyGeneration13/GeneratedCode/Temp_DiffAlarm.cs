using System;
using System.Collections;


namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Temp_DiffAlarm
	{

		#region Private Members

		private string m_name; 
		private string m_vdcshal1; 
		private string m_vdcslal1; 
		private string m_csvhal1; 
		private string m_csvlal1; 		
		#endregion

		#region Constuctor

		public Temp_DiffAlarm()
		{
			m_name = String.Empty; 
			m_vdcshal1 = String.Empty; 
			m_vdcslal1 = String.Empty; 
			m_csvhal1 = String.Empty; 
			m_csvlal1 = String.Empty; 
		}

		#region Public Properties
			
		public string Name
		{
			get { return m_name; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());
				
				m_name = value;
			}
		}
			
		public string Vdcshal1
		{
			get { return m_vdcshal1; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Vdcshal1", value, value.ToString());
				
				m_vdcshal1 = value;
			}
		}
			
		public string Vdcslal1
		{
			get { return m_vdcslal1; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Vdcslal1", value, value.ToString());
				
				m_vdcslal1 = value;
			}
		}
			
		public string Csvhal1
		{
			get { return m_csvhal1; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Csvhal1", value, value.ToString());
				
				m_csvhal1 = value;
			}
		}
			
		public string Csvlal1
		{
			get { return m_csvlal1; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Csvlal1", value, value.ToString());
				
				m_csvlal1 = value;
			}
		}
			
				
		#endregion 

		#region Private Accessors for NHibernate
		
		
		private string m_name
		{
			get { return m_name; }
			set { m_name = value; }
		}

		
		private string m_VdcsHAL1
		{
			get { return m_vdcshal1; }
			set { m_vdcshal1 = value; }
		}

		
		private string m_VdcsLAL1
		{
			get { return m_vdcslal1; }
			set { m_vdcslal1 = value; }
		}

		
		private string m_CsvHAL1
		{
			get { return m_csvhal1; }
			set { m_csvhal1 = value; }
		}

		
		private string m_CsvLAL1
		{
			get { return m_csvlal1; }
			set { m_csvlal1 = value; }
		}

		#endregion // Internal Accessors for NHibernate 

		#region Public Functions

		#endregion //Public Functions

		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			Temp_DiffAlarm castObj = (Temp_DiffAlarm)obj; 
			return castObj.GetHashCode() == this.GetHashCode();
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return this.GetType().FullName.GetHashCode();
				
		}
		#endregion
			}
}
