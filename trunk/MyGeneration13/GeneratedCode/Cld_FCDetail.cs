using System;
using System.Collections;


namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Cld_FCDetail
	{

		#region Private Members

		private string m_objectid; 
		private IList m_CldFcDetailList; 
		private string m_pinname; 
		private string m_pinvalue; 
		private string m_networkid; 
		private bool m_ishistory; 
		private string m_point; 		
		#endregion

		#region Constuctor

		public Cld_FCDetail()
		{
			m_objectid = String.Empty; 
			m_CldFcDetailList = new ArrayList(); 
			m_pinname = String.Empty; 
			m_pinvalue = String.Empty; 
			m_networkid = String.Empty; 
			m_ishistory = false; 
			m_point = String.Empty; 
		}

		public Cld_FCDetail(
			bool ishistory)
			: this()
		{
			m_objectid = String.Empty;
			m_pinname = String.Empty;
			m_pinvalue = String.Empty;
			m_networkid = String.Empty;
			m_ishistory = ishistory;
			m_point = String.Empty;
		}
		#endregion // End Constructor

		#region Public Properties
			
		public string Objectid
		{
			get { return m_objectid; }

			set	
			{	
				if(  value != null &&  value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Objectid", value, value.ToString());
				
				m_objectid = value;
			}
		}
			
		public CldFcDetail[] CldFcDetail
		{
			get
			{

				ArrayList readonlyarray = ArrayList.ReadOnly(new ArrayList(m_CldFcDetailList));
				return (CldFcDetail[]) readonlyarray.ToArray(typeof(CldFcDetail));
			}
		}
						
		public string PinName
		{
			get { return m_pinname; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for PinName", value, value.ToString());
				
				m_pinname = value;
			}
		}
			
		public string PinValue
		{
			get { return m_pinvalue; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for PinValue", value, value.ToString());
				
				m_pinvalue = value;
			}
		}
			
		public string Networkid
		{
			get { return m_networkid; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Networkid", value, value.ToString());
				
				m_networkid = value;
			}
		}
			
		public bool IsHistory
		{
			get { return m_ishistory; }
			set
			{
				m_ishistory = value;
			}

		}
			
		public string Point
		{
			get { return m_point; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Point", value, value.ToString());
				
				m_point = value;
			}
		}
			
				
		#endregion 

		#region Private Accessors for NHibernate
		
		
		private string m_ObjectID
		{
			get { return m_objectid; }
			set { m_objectid = value; }
		}

		
		private string m_PinName
		{
			get { return m_pinname; }
			set { m_pinname = value; }
		}

		
		private string m_PinValue
		{
			get { return m_pinvalue; }
			set { m_pinvalue = value; }
		}

		
		private string m_NetworkID
		{
			get { return m_networkid; }
			set { m_networkid = value; }
		}

		
		private bool m_IsHistory
		{
			get { return m_ishistory; }
			set { m_ishistory = value; }
		}

		
		private string m_Point
		{
			get { return m_point; }
			set { m_point = value; }
		}

		#endregion // Internal Accessors for NHibernate 

		#region Public Functions

		public void AddCldFcDetail(CldFcDetail dados)
		{
			#region Sanity Check
			if (dados == null)
				throw new ArgumentNullException("dados", "Parâmetro não pode ser nulo");
			#endregion
			m_CldFcDetailList.Add(dados);
		}
		

		#endregion //Public Functions

		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			Cld_FCDetail castObj = (Cld_FCDetail)obj; 
			return castObj.GetHashCode() == this.GetHashCode();
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return this.GetType().FullName.GetHashCode();
				
		}
		#endregion
			}
}
