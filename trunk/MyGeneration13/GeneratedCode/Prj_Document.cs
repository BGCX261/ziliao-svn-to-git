using System;
using System.Collections;


namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Prj_Document
	{

		#region Private Members

		private string m_documentname; 
		private string m_controlleraddress; 
		private IList m_PrjDocumentList; 
		private string m_documentcaption; 
		private DateTime m_createtime; 
		private DateTime m_modifytime; 
		private string m_order; 
		private string m_type; 
		private string m_translatorresult; 
		private string m_changed; 		
		#endregion

		#region Constuctor

		public Prj_Document()
		{
			m_documentname = String.Empty; 
			m_controlleraddress = String.Empty; 
			m_PrjDocumentList = new ArrayList(); 
			m_documentcaption = String.Empty; 
			m_createtime = DateTime.MinValue; 
			m_modifytime = DateTime.MinValue; 
			m_order = String.Empty; 
			m_type = String.Empty; 
			m_translatorresult = String.Empty; 
			m_changed = String.Empty; 
		}

		#region Public Properties
			
		public string DocumentName
		{
			get { return m_documentname; }

			set	
			{	
				if(  value != null &&  value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for DocumentName", value, value.ToString());
				
				m_documentname = value;
			}
		}
			
		public string ControllerAddress
		{
			get { return m_controlleraddress; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for ControllerAddress", value, value.ToString());
				
				m_controlleraddress = value;
			}
		}
			
		public PrjDocument[] PrjDocument
		{
			get
			{

				ArrayList readonlyarray = ArrayList.ReadOnly(new ArrayList(m_PrjDocumentList));
				return (PrjDocument[]) readonlyarray.ToArray(typeof(PrjDocument));
			}
		}
						
		public string DocumentCaption
		{
			get { return m_documentcaption; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for DocumentCaption", value, value.ToString());
				
				m_documentcaption = value;
			}
		}
			
		public DateTime CreateTime
		{
			get { return m_createtime; }
			set
			{
				m_createtime = value;
			}

		}
			
		public DateTime ModifyTime
		{
			get { return m_modifytime; }
			set
			{
				m_modifytime = value;
			}

		}
			
		public string Order
		{
			get { return m_order; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Order", value, value.ToString());
				
				m_order = value;
			}
		}
			
		public string Type
		{
			get { return m_type; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Type", value, value.ToString());
				
				m_type = value;
			}
		}
			
		public string TranslatorResult
		{
			get { return m_translatorresult; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for TranslatorResult", value, value.ToString());
				
				m_translatorresult = value;
			}
		}
			
		public string Changed
		{
			get { return m_changed; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Changed", value, value.ToString());
				
				m_changed = value;
			}
		}
			
				
		#endregion 

		#region Private Accessors for NHibernate
		
		
		private string m_DocumentName
		{
			get { return m_documentname; }
			set { m_documentname = value; }
		}

		
		private string m_ControllerAddress
		{
			get { return m_controlleraddress; }
			set { m_controlleraddress = value; }
		}

		
		private string m_DocumentCaption
		{
			get { return m_documentcaption; }
			set { m_documentcaption = value; }
		}

		
		private DateTime m_CreateTime
		{
			get { return m_createtime; }
			set { m_createtime = value; }
		}

		
		private DateTime m_ModifyTime
		{
			get { return m_modifytime; }
			set { m_modifytime = value; }
		}

		
		private string m_Order
		{
			get { return m_order; }
			set { m_order = value; }
		}

		
		private string m_Type
		{
			get { return m_type; }
			set { m_type = value; }
		}

		
		private string m_TranslatorResult
		{
			get { return m_translatorresult; }
			set { m_translatorresult = value; }
		}

		
		private string m_changed
		{
			get { return m_changed; }
			set { m_changed = value; }
		}

		#endregion // Internal Accessors for NHibernate 

		#region Public Functions

		public void AddPrjDocument(PrjDocument dados)
		{
			#region Sanity Check
			if (dados == null)
				throw new ArgumentNullException("dados", "Parâmetro não pode ser nulo");
			#endregion
			m_PrjDocumentList.Add(dados);
		}
		

		#endregion //Public Functions

		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			Prj_Document castObj = (Prj_Document)obj; 
			return castObj.GetHashCode() == this.GetHashCode();
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return this.GetType().FullName.GetHashCode();
				
		}
		#endregion
			}
}
