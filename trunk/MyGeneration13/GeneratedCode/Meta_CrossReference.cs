using System;
using System.Collections;


namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Meta_CrossReference
	{

		#region Private Members

		private string m_functionname; 
		private string m_datatype; 
		private string m_type; 
		private string m_description; 		
		#endregion

		#region Constuctor

		public Meta_CrossReference()
		{
			m_functionname = String.Empty; 
			m_datatype = String.Empty; 
			m_type = String.Empty; 
			m_description = String.Empty; 
		}

		#region Public Properties
			
		public string FunctionName
		{
			get { return m_functionname; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for FunctionName", value, value.ToString());
				
				m_functionname = value;
			}
		}
			
		public string DataType
		{
			get { return m_datatype; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for DataType", value, value.ToString());
				
				m_datatype = value;
			}
		}
			
		public string Type
		{
			get { return m_type; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Type", value, value.ToString());
				
				m_type = value;
			}
		}
			
		public string Description
		{
			get { return m_description; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Description", value, value.ToString());
				
				m_description = value;
			}
		}
			
				
		#endregion 

		#region Private Accessors for NHibernate
		
		
		private string m_FunctionName
		{
			get { return m_functionname; }
			set { m_functionname = value; }
		}

		
		private string m_DataType
		{
			get { return m_datatype; }
			set { m_datatype = value; }
		}

		
		private string m_Type
		{
			get { return m_type; }
			set { m_type = value; }
		}

		
		private string m_Description
		{
			get { return m_description; }
			set { m_description = value; }
		}

		#endregion // Internal Accessors for NHibernate 

		#region Public Functions

		#endregion //Public Functions

		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			Meta_CrossReference castObj = (Meta_CrossReference)obj; 
			return castObj.GetHashCode() == this.GetHashCode();
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return this.GetType().FullName.GetHashCode();
				
		}
		#endregion
			}
}
