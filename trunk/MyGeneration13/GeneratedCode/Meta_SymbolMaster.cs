using System;
using System.Collections;


namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Meta_SymbolMaster
	{

		#region Private Members

		private string m_symbolid; 
		private IList m_MetaSymbolDetailList; 
		private string m_symbolname; 
		private string m_symboltype; 
		private string m_oringinpoint; 
		private bool m_readonly; 
		private string m_functionname; 
		private short m_code; 		
		#endregion

		#region Constuctor

		public Meta_SymbolMaster()
		{
			m_symbolid = String.Empty; 
			m_MetaSymbolDetailList = new ArrayList(); 
			m_symbolname = String.Empty; 
			m_symboltype = String.Empty; 
			m_oringinpoint = String.Empty; 
			m_readonly = false; 
			m_functionname = String.Empty; 
			m_code = 0; 
		}

		public Meta_SymbolMaster(
			bool readonly)
			: this()
		{
			m_symbolid = String.Empty;
			m_symbolname = String.Empty;
			m_symboltype = String.Empty;
			m_oringinpoint = String.Empty;
			m_readonly = readonly;
			m_functionname = String.Empty;
			m_code = 0;
		}
		#endregion // End Constructor

		#region Public Properties
			
		public string Symbolid
		{
			get { return m_symbolid; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Symbolid", value, value.ToString());
				
				m_symbolid = value;
			}
		}
			
		public MetaSymbolDetail[] MetaSymbolDetail
		{
			get
			{

				ArrayList readonlyarray = ArrayList.ReadOnly(new ArrayList(m_MetaSymbolDetailList));
				return (MetaSymbolDetail[]) readonlyarray.ToArray(typeof(MetaSymbolDetail));
			}
		}
						
		public string SymbolName
		{
			get { return m_symbolname; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for SymbolName", value, value.ToString());
				
				m_symbolname = value;
			}
		}
			
		public string SymbolType
		{
			get { return m_symboltype; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for SymbolType", value, value.ToString());
				
				m_symboltype = value;
			}
		}
			
		public string OringinPoint
		{
			get { return m_oringinpoint; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for OringinPoint", value, value.ToString());
				
				m_oringinpoint = value;
			}
		}
			
		public bool ReadOnly
		{
			get { return m_readonly; }
			set
			{
				m_readonly = value;
			}

		}
			
		public string FunctionName
		{
			get { return m_functionname; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for FunctionName", value, value.ToString());
				
				m_functionname = value;
			}
		}
			
		public short Code
		{
			get { return m_code; }
			set
			{
				m_code = value;
			}

		}
			
				
		#endregion 

		#region Private Accessors for NHibernate
		
		
		private string m_SymbolID
		{
			get { return m_symbolid; }
			set { m_symbolid = value; }
		}

		
		private string m_SymbolName
		{
			get { return m_symbolname; }
			set { m_symbolname = value; }
		}

		
		private string m_SymbolType
		{
			get { return m_symboltype; }
			set { m_symboltype = value; }
		}

		
		private string m_OringinPoint
		{
			get { return m_oringinpoint; }
			set { m_oringinpoint = value; }
		}

		
		private bool m_ReadOnly
		{
			get { return m_readonly; }
			set { m_readonly = value; }
		}

		
		private string m_FunctionName
		{
			get { return m_functionname; }
			set { m_functionname = value; }
		}

		
		private short m_Code
		{
			get { return m_code; }
			set { m_code = value; }
		}

		#endregion // Internal Accessors for NHibernate 

		#region Public Functions

		public void AddMetaSymbolDetail(MetaSymbolDetail dados)
		{
			#region Sanity Check
			if (dados == null)
				throw new ArgumentNullException("dados", "Parâmetro não pode ser nulo");
			#endregion
			m_MetaSymbolDetailList.Add(dados);
		}
		

		#endregion //Public Functions

		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			Meta_SymbolMaster castObj = (Meta_SymbolMaster)obj; 
			return castObj.GetHashCode() == this.GetHashCode();
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return this.GetType().FullName.GetHashCode();
				
		}
		#endregion
			}
}
