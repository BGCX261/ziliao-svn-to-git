using System;
using System.Collections;


namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Cld_Graphic
	{

		#region Private Members

		private string m_objectid; 
		private string m_controlleraddress; 
		private string m_documentname; 
		private string m_sheetname; 
		private string m_type; 
		private string m_layer; 
		private string m_data; 		
		#endregion

		#region Constuctor

		public Cld_Graphic()
		{
			m_objectid = String.Empty; 
			m_controlleraddress = String.Empty; 
			m_documentname = String.Empty; 
			m_sheetname = String.Empty; 
			m_type = String.Empty; 
			m_layer = String.Empty; 
			m_data = String.Empty; 
		}

		#region Public Properties
			
		public string Objectid
		{
			get { return m_objectid; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Objectid", value, value.ToString());
				
				m_objectid = value;
			}
		}
			
		public string ControllerAddress
		{
			get { return m_controlleraddress; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for ControllerAddress", value, value.ToString());
				
				m_controlleraddress = value;
			}
		}
			
		public string DocumentName
		{
			get { return m_documentname; }

			set	
			{	
				if(  value != null &&  value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for DocumentName", value, value.ToString());
				
				m_documentname = value;
			}
		}
			
		public string SheetName
		{
			get { return m_sheetname; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for SheetName", value, value.ToString());
				
				m_sheetname = value;
			}
		}
			
		public string Type
		{
			get { return m_type; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Type", value, value.ToString());
				
				m_type = value;
			}
		}
			
		public string Layer
		{
			get { return m_layer; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Layer", value, value.ToString());
				
				m_layer = value;
			}
		}
			
		public string Data
		{
			get { return m_data; }

			set	
			{	
				if(  value != null &&  value.Length > 0)
					throw new ArgumentOutOfRangeException("Invalid value for Data", value, value.ToString());
				
				m_data = value;
			}
		}
			
				
		#endregion 

		#region Private Accessors for NHibernate
		
		
		private string m_ObjectID
		{
			get { return m_objectid; }
			set { m_objectid = value; }
		}

		
		private string m_ControllerAddress
		{
			get { return m_controlleraddress; }
			set { m_controlleraddress = value; }
		}

		
		private string m_DocumentName
		{
			get { return m_documentname; }
			set { m_documentname = value; }
		}

		
		private string m_SheetName
		{
			get { return m_sheetname; }
			set { m_sheetname = value; }
		}

		
		private string m_Type
		{
			get { return m_type; }
			set { m_type = value; }
		}

		
		private string m_Layer
		{
			get { return m_layer; }
			set { m_layer = value; }
		}

		
		private string m_Data
		{
			get { return m_data; }
			set { m_data = value; }
		}

		#endregion // Internal Accessors for NHibernate 

		#region Public Functions

		#endregion //Public Functions

		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			Cld_Graphic castObj = (Cld_Graphic)obj; 
			return castObj.GetHashCode() == this.GetHashCode();
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return this.GetType().FullName.GetHashCode();
				
		}
		#endregion
			}
}
