using System;
using System.Collections;


namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Prj_Unit
	{

		#region Private Members

		private string m_unitaddress; 
		private IList m_PrjControllerList; 
		private string m_unitname; 
		private PrjNetwork m_networkaddress; 
		private string m_description; 		
		#endregion

		#region Constuctor

		public Prj_Unit()
		{
			m_unitaddress = String.Empty; 
			m_PrjControllerList = new ArrayList(); 
			m_unitname = String.Empty; 
			m_networkaddress = new PrjNetwork(); 
			m_description = String.Empty; 
		}

		#region Public Properties
			
		public string UnitAddress
		{
			get { return m_unitaddress; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for UnitAddress", value, value.ToString());
				
				m_unitaddress = value;
			}
		}
			
		public PrjController[] PrjController
		{
			get
			{

				ArrayList readonlyarray = ArrayList.ReadOnly(new ArrayList(m_PrjControllerList));
				return (PrjController[]) readonlyarray.ToArray(typeof(PrjController));
			}
		}
						
		public string UnitName
		{
			get { return m_unitname; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for UnitName", value, value.ToString());
				
				m_unitname = value;
			}
		}
			
		public PrjNetwork NetworkAddress
		{
			get { return m_networkaddress; }
			set
			{
				m_networkaddress = value;
			}

		}
			
		public string Description
		{
			get { return m_description; }

			set	
			{	
				if(  value != null &&  value.Length > 0)
					throw new ArgumentOutOfRangeException("Invalid value for Description", value, value.ToString());
				
				m_description = value;
			}
		}
			
				
		#endregion 

		#region Private Accessors for NHibernate
		
		
		private string m_UnitAddress
		{
			get { return m_unitaddress; }
			set { m_unitaddress = value; }
		}

		
		private string m_UnitName
		{
			get { return m_unitname; }
			set { m_unitname = value; }
		}

		
		private PrjNetwork m_NetworkAddress
		{
			get { return m_networkaddress; }
			set { m_networkaddress = value; }
		}

		
		private string m_Description
		{
			get { return m_description; }
			set { m_description = value; }
		}

		#endregion // Internal Accessors for NHibernate 

		#region Public Functions

		public void AddPrjController(PrjController dados)
		{
			#region Sanity Check
			if (dados == null)
				throw new ArgumentNullException("dados", "Parâmetro não pode ser nulo");
			#endregion
			m_PrjControllerList.Add(dados);
		}
		

		#endregion //Public Functions

		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			Prj_Unit castObj = (Prj_Unit)obj; 
			return castObj.GetHashCode() == this.GetHashCode();
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return this.GetType().FullName.GetHashCode();
				
		}
		#endregion
			}
}
