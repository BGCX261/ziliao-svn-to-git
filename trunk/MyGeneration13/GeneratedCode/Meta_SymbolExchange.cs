using System;
using System.Collections;


namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Meta_SymbolExchange
	{

		#region Private Members

		private string m_objectid; 
		private string m_objectname; 
		private string m_objecttype; 
		private string m_parentobjectid; 		
		#endregion

		#region Constuctor

		public Meta_SymbolExchange()
		{
			m_objectid = String.Empty; 
			m_objectname = String.Empty; 
			m_objecttype = String.Empty; 
			m_parentobjectid = String.Empty; 
		}

		#region Public Properties
			
		public string Objectid
		{
			get { return m_objectid; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Objectid", value, value.ToString());
				
				m_objectid = value;
			}
		}
			
		public string ObjectName
		{
			get { return m_objectname; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for ObjectName", value, value.ToString());
				
				m_objectname = value;
			}
		}
			
		public string ObjectType
		{
			get { return m_objecttype; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for ObjectType", value, value.ToString());
				
				m_objecttype = value;
			}
		}
			
		public string ParentObjectid
		{
			get { return m_parentobjectid; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for ParentObjectid", value, value.ToString());
				
				m_parentobjectid = value;
			}
		}
			
				
		#endregion 

		#region Private Accessors for NHibernate
		
		
		private string m_ObjectID
		{
			get { return m_objectid; }
			set { m_objectid = value; }
		}

		
		private string m_ObjectName
		{
			get { return m_objectname; }
			set { m_objectname = value; }
		}

		
		private string m_ObjectType
		{
			get { return m_objecttype; }
			set { m_objecttype = value; }
		}

		
		private string m_ParentObjectID
		{
			get { return m_parentobjectid; }
			set { m_parentobjectid = value; }
		}

		#endregion // Internal Accessors for NHibernate 

		#region Public Functions

		#endregion //Public Functions

		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			Meta_SymbolExchange castObj = (Meta_SymbolExchange)obj; 
			return castObj.GetHashCode() == this.GetHashCode();
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return this.GetType().FullName.GetHashCode();
				
		}
		#endregion
			}
}
