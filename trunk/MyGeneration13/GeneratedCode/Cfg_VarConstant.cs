using System;
using System.Collections;


namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Cfg_VarConstant
	{

		#region Private Members

		private string m_varname; 
		private string m_datatype; 
		private string m_value; 
		private string m_symbolname; 		
		#endregion

		#region Constuctor

		public Cfg_VarConstant()
		{
			m_varname = String.Empty; 
			m_datatype = String.Empty; 
			m_value = String.Empty; 
			m_symbolname = String.Empty; 
		}

		#region Public Properties
			
		public string VarName
		{
			get { return m_varname; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for VarName", value, value.ToString());
				
				m_varname = value;
			}
		}
			
		public string DataType
		{
			get { return m_datatype; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for DataType", value, value.ToString());
				
				m_datatype = value;
			}
		}
			
		public string Value
		{
			get { return m_value; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Value", value, value.ToString());
				
				m_value = value;
			}
		}
			
		public string SymbolName
		{
			get { return m_symbolname; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for SymbolName", value, value.ToString());
				
				m_symbolname = value;
			}
		}
			
				
		#endregion 

		#region Private Accessors for NHibernate
		
		
		private string m_VarName
		{
			get { return m_varname; }
			set { m_varname = value; }
		}

		
		private string m_DataType
		{
			get { return m_datatype; }
			set { m_datatype = value; }
		}

		
		private string m_Value
		{
			get { return m_value; }
			set { m_value = value; }
		}

		
		private string m_SymbolName
		{
			get { return m_symbolname; }
			set { m_symbolname = value; }
		}

		#endregion // Internal Accessors for NHibernate 

		#region Public Functions

		#endregion //Public Functions

		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			Cfg_VarConstant castObj = (Cfg_VarConstant)obj; 
			return castObj.GetHashCode() == this.GetHashCode();
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return this.GetType().FullName.GetHashCode();
				
		}
		#endregion
			}
}
