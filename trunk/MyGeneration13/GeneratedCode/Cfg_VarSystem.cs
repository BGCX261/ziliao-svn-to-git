using System;
using System.Collections;


namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Cfg_VarSystem
	{

		#region Private Members

		private string m_name; 
		private string m_kkscode; 
		private string m_iomapname; 
		private int m_iomapdirection; 
		private string m_datatype; 
		private string m_description; 
		private string m_controlleraddress; 
		private string m_defaultvalue; 
		private string m_forcevalue; 
		private bool m_ishistory; 
		private string m_minimumscale; 
		private string m_maximunscale; 
		private int m_lowalarm1priority; 
		private int m_lowalarm2priority; 
		private int m_lowalarm3priority; 
		private int m_lowalarm4priority; 
		private int m_lowalarmuserpriority; 
		private int m_highalarm1priority; 
		private int m_highalarm2priority; 
		private int m_highalarm3priority; 
		private int m_highalarm4priority; 
		private int m_highalarmuserpriority; 
		private string m_lowalarmlimit1value; 
		private string m_lowalarmlimit2value; 
		private string m_lowalarmlimit3value; 
		private string m_lowalarmlimit4value; 
		private string m_lowalarmlimituservalue; 
		private string m_highalarmlimit1value; 
		private string m_highalarmlimit2value; 
		private string m_highalarmlimit3value; 
		private string m_highalarmlimit4value; 
		private string m_highalarmlimituservalue; 
		private int m_alarmpriority; 
		private int m_statuschecking; 
		private bool m_issoe; 
		private int m_iotype; 		
		#endregion

		#region Constuctor

		public Cfg_VarSystem()
		{
			m_name = String.Empty; 
			m_kkscode = String.Empty; 
			m_iomapname = String.Empty; 
			m_iomapdirection = 0; 
			m_datatype = String.Empty; 
			m_description = String.Empty; 
			m_controlleraddress = String.Empty; 
			m_defaultvalue = String.Empty; 
			m_forcevalue = String.Empty; 
			m_ishistory = false; 
			m_minimumscale = String.Empty; 
			m_maximunscale = String.Empty; 
			m_lowalarm1priority = 0; 
			m_lowalarm2priority = 0; 
			m_lowalarm3priority = 0; 
			m_lowalarm4priority = 0; 
			m_lowalarmuserpriority = 0; 
			m_highalarm1priority = 0; 
			m_highalarm2priority = 0; 
			m_highalarm3priority = 0; 
			m_highalarm4priority = 0; 
			m_highalarmuserpriority = 0; 
			m_lowalarmlimit1value = String.Empty; 
			m_lowalarmlimit2value = String.Empty; 
			m_lowalarmlimit3value = String.Empty; 
			m_lowalarmlimit4value = String.Empty; 
			m_lowalarmlimituservalue = String.Empty; 
			m_highalarmlimit1value = String.Empty; 
			m_highalarmlimit2value = String.Empty; 
			m_highalarmlimit3value = String.Empty; 
			m_highalarmlimit4value = String.Empty; 
			m_highalarmlimituservalue = String.Empty; 
			m_alarmpriority = 0; 
			m_statuschecking = 0; 
			m_issoe = false; 
			m_iotype = 0; 
		}

		public Cfg_VarSystem(
			bool ishistory, 
			bool issoe)
			: this()
		{
			m_name = String.Empty;
			m_kkscode = String.Empty;
			m_iomapname = String.Empty;
			m_iomapdirection = 0;
			m_datatype = String.Empty;
			m_description = String.Empty;
			m_controlleraddress = String.Empty;
			m_defaultvalue = String.Empty;
			m_forcevalue = String.Empty;
			m_ishistory = ishistory;
			m_minimumscale = String.Empty;
			m_maximunscale = String.Empty;
			m_lowalarm1priority = 0;
			m_lowalarm2priority = 0;
			m_lowalarm3priority = 0;
			m_lowalarm4priority = 0;
			m_lowalarmuserpriority = 0;
			m_highalarm1priority = 0;
			m_highalarm2priority = 0;
			m_highalarm3priority = 0;
			m_highalarm4priority = 0;
			m_highalarmuserpriority = 0;
			m_lowalarmlimit1value = String.Empty;
			m_lowalarmlimit2value = String.Empty;
			m_lowalarmlimit3value = String.Empty;
			m_lowalarmlimit4value = String.Empty;
			m_lowalarmlimituservalue = String.Empty;
			m_highalarmlimit1value = String.Empty;
			m_highalarmlimit2value = String.Empty;
			m_highalarmlimit3value = String.Empty;
			m_highalarmlimit4value = String.Empty;
			m_highalarmlimituservalue = String.Empty;
			m_alarmpriority = 0;
			m_statuschecking = 0;
			m_issoe = issoe;
			m_iotype = 0;
		}
		#endregion // End Constructor

		#region Public Properties
			
		public string Name
		{
			get { return m_name; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());
				
				m_name = value;
			}
		}
			
		public string KksCode
		{
			get { return m_kkscode; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for KksCode", value, value.ToString());
				
				m_kkscode = value;
			}
		}
			
		public string IoMapName
		{
			get { return m_iomapname; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for IoMapName", value, value.ToString());
				
				m_iomapname = value;
			}
		}
			
		public int IoMapDirection
		{
			get { return m_iomapdirection; }
			set
			{
				m_iomapdirection = value;
			}

		}
			
		public string DataType
		{
			get { return m_datatype; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for DataType", value, value.ToString());
				
				m_datatype = value;
			}
		}
			
		public string Description
		{
			get { return m_description; }

			set	
			{	
				if(  value != null &&  value.Length > 0)
					throw new ArgumentOutOfRangeException("Invalid value for Description", value, value.ToString());
				
				m_description = value;
			}
		}
			
		public string ControllerAddress
		{
			get { return m_controlleraddress; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for ControllerAddress", value, value.ToString());
				
				m_controlleraddress = value;
			}
		}
			
		public string DefaultValue
		{
			get { return m_defaultvalue; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for DefaultValue", value, value.ToString());
				
				m_defaultvalue = value;
			}
		}
			
		public string ForceValue
		{
			get { return m_forcevalue; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for ForceValue", value, value.ToString());
				
				m_forcevalue = value;
			}
		}
			
		public bool IsHistory
		{
			get { return m_ishistory; }
			set
			{
				m_ishistory = value;
			}

		}
			
		public string MinimumScale
		{
			get { return m_minimumscale; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for MinimumScale", value, value.ToString());
				
				m_minimumscale = value;
			}
		}
			
		public string MaximunScale
		{
			get { return m_maximunscale; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for MaximunScale", value, value.ToString());
				
				m_maximunscale = value;
			}
		}
			
		public int LowAlarm1Priority
		{
			get { return m_lowalarm1priority; }
			set
			{
				m_lowalarm1priority = value;
			}

		}
			
		public int LowAlarm2Priority
		{
			get { return m_lowalarm2priority; }
			set
			{
				m_lowalarm2priority = value;
			}

		}
			
		public int LowAlarm3Priority
		{
			get { return m_lowalarm3priority; }
			set
			{
				m_lowalarm3priority = value;
			}

		}
			
		public int LowAlarm4Priority
		{
			get { return m_lowalarm4priority; }
			set
			{
				m_lowalarm4priority = value;
			}

		}
			
		public int LowAlarmUserPriority
		{
			get { return m_lowalarmuserpriority; }
			set
			{
				m_lowalarmuserpriority = value;
			}

		}
			
		public int HighAlarm1Priority
		{
			get { return m_highalarm1priority; }
			set
			{
				m_highalarm1priority = value;
			}

		}
			
		public int HighAlarm2Priority
		{
			get { return m_highalarm2priority; }
			set
			{
				m_highalarm2priority = value;
			}

		}
			
		public int HighAlarm3Priority
		{
			get { return m_highalarm3priority; }
			set
			{
				m_highalarm3priority = value;
			}

		}
			
		public int HighAlarm4Priority
		{
			get { return m_highalarm4priority; }
			set
			{
				m_highalarm4priority = value;
			}

		}
			
		public int HighAlarmUserPriority
		{
			get { return m_highalarmuserpriority; }
			set
			{
				m_highalarmuserpriority = value;
			}

		}
			
		public string LowAlarmLimit1Value
		{
			get { return m_lowalarmlimit1value; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for LowAlarmLimit1Value", value, value.ToString());
				
				m_lowalarmlimit1value = value;
			}
		}
			
		public string LowAlarmLimit2Value
		{
			get { return m_lowalarmlimit2value; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for LowAlarmLimit2Value", value, value.ToString());
				
				m_lowalarmlimit2value = value;
			}
		}
			
		public string LowAlarmLimit3Value
		{
			get { return m_lowalarmlimit3value; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for LowAlarmLimit3Value", value, value.ToString());
				
				m_lowalarmlimit3value = value;
			}
		}
			
		public string LowAlarmLimit4Value
		{
			get { return m_lowalarmlimit4value; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for LowAlarmLimit4Value", value, value.ToString());
				
				m_lowalarmlimit4value = value;
			}
		}
			
		public string LowAlarmLimitUserValue
		{
			get { return m_lowalarmlimituservalue; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for LowAlarmLimitUserValue", value, value.ToString());
				
				m_lowalarmlimituservalue = value;
			}
		}
			
		public string HighAlarmLimit1Value
		{
			get { return m_highalarmlimit1value; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for HighAlarmLimit1Value", value, value.ToString());
				
				m_highalarmlimit1value = value;
			}
		}
			
		public string HighAlarmLimit2Value
		{
			get { return m_highalarmlimit2value; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for HighAlarmLimit2Value", value, value.ToString());
				
				m_highalarmlimit2value = value;
			}
		}
			
		public string HighAlarmLimit3Value
		{
			get { return m_highalarmlimit3value; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for HighAlarmLimit3Value", value, value.ToString());
				
				m_highalarmlimit3value = value;
			}
		}
			
		public string HighAlarmLimit4Value
		{
			get { return m_highalarmlimit4value; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for HighAlarmLimit4Value", value, value.ToString());
				
				m_highalarmlimit4value = value;
			}
		}
			
		public string HighAlarmLimitUserValue
		{
			get { return m_highalarmlimituservalue; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for HighAlarmLimitUserValue", value, value.ToString());
				
				m_highalarmlimituservalue = value;
			}
		}
			
		public int AlarmPriority
		{
			get { return m_alarmpriority; }
			set
			{
				m_alarmpriority = value;
			}

		}
			
		public int StatusChecking
		{
			get { return m_statuschecking; }
			set
			{
				m_statuschecking = value;
			}

		}
			
		public bool IsSoe
		{
			get { return m_issoe; }
			set
			{
				m_issoe = value;
			}

		}
			
		public int IoType
		{
			get { return m_iotype; }
			set
			{
				m_iotype = value;
			}

		}
			
				
		#endregion 

		#region Private Accessors for NHibernate
		
		
		private string m_Name
		{
			get { return m_name; }
			set { m_name = value; }
		}

		
		private string m_KKSCode
		{
			get { return m_kkscode; }
			set { m_kkscode = value; }
		}

		
		private string m_IOMapName
		{
			get { return m_iomapname; }
			set { m_iomapname = value; }
		}

		
		private int m_IOMapDirection
		{
			get { return m_iomapdirection; }
			set { m_iomapdirection = value; }
		}

		
		private string m_DataType
		{
			get { return m_datatype; }
			set { m_datatype = value; }
		}

		
		private string m_Description
		{
			get { return m_description; }
			set { m_description = value; }
		}

		
		private string m_ControllerAddress
		{
			get { return m_controlleraddress; }
			set { m_controlleraddress = value; }
		}

		
		private string m_DefaultValue
		{
			get { return m_defaultvalue; }
			set { m_defaultvalue = value; }
		}

		
		private string m_ForceValue
		{
			get { return m_forcevalue; }
			set { m_forcevalue = value; }
		}

		
		private bool m_IsHistory
		{
			get { return m_ishistory; }
			set { m_ishistory = value; }
		}

		
		private string m_MinimumScale
		{
			get { return m_minimumscale; }
			set { m_minimumscale = value; }
		}

		
		private string m_MaximunScale
		{
			get { return m_maximunscale; }
			set { m_maximunscale = value; }
		}

		
		private int m_LowAlarm1Priority
		{
			get { return m_lowalarm1priority; }
			set { m_lowalarm1priority = value; }
		}

		
		private int m_LowAlarm2Priority
		{
			get { return m_lowalarm2priority; }
			set { m_lowalarm2priority = value; }
		}

		
		private int m_LowAlarm3Priority
		{
			get { return m_lowalarm3priority; }
			set { m_lowalarm3priority = value; }
		}

		
		private int m_LowAlarm4Priority
		{
			get { return m_lowalarm4priority; }
			set { m_lowalarm4priority = value; }
		}

		
		private int m_LowAlarmUserPriority
		{
			get { return m_lowalarmuserpriority; }
			set { m_lowalarmuserpriority = value; }
		}

		
		private int m_HighAlarm1Priority
		{
			get { return m_highalarm1priority; }
			set { m_highalarm1priority = value; }
		}

		
		private int m_HighAlarm2Priority
		{
			get { return m_highalarm2priority; }
			set { m_highalarm2priority = value; }
		}

		
		private int m_HighAlarm3Priority
		{
			get { return m_highalarm3priority; }
			set { m_highalarm3priority = value; }
		}

		
		private int m_HighAlarm4Priority
		{
			get { return m_highalarm4priority; }
			set { m_highalarm4priority = value; }
		}

		
		private int m_HighAlarmUserPriority
		{
			get { return m_highalarmuserpriority; }
			set { m_highalarmuserpriority = value; }
		}

		
		private string m_LowAlarmLimit1Value
		{
			get { return m_lowalarmlimit1value; }
			set { m_lowalarmlimit1value = value; }
		}

		
		private string m_LowAlarmLimit2Value
		{
			get { return m_lowalarmlimit2value; }
			set { m_lowalarmlimit2value = value; }
		}

		
		private string m_LowAlarmLimit3Value
		{
			get { return m_lowalarmlimit3value; }
			set { m_lowalarmlimit3value = value; }
		}

		
		private string m_LowAlarmLimit4Value
		{
			get { return m_lowalarmlimit4value; }
			set { m_lowalarmlimit4value = value; }
		}

		
		private string m_LowAlarmLimitUserValue
		{
			get { return m_lowalarmlimituservalue; }
			set { m_lowalarmlimituservalue = value; }
		}

		
		private string m_HighAlarmLimit1Value
		{
			get { return m_highalarmlimit1value; }
			set { m_highalarmlimit1value = value; }
		}

		
		private string m_HighAlarmLimit2Value
		{
			get { return m_highalarmlimit2value; }
			set { m_highalarmlimit2value = value; }
		}

		
		private string m_HighAlarmLimit3Value
		{
			get { return m_highalarmlimit3value; }
			set { m_highalarmlimit3value = value; }
		}

		
		private string m_HighAlarmLimit4Value
		{
			get { return m_highalarmlimit4value; }
			set { m_highalarmlimit4value = value; }
		}

		
		private string m_HighAlarmLimitUserValue
		{
			get { return m_highalarmlimituservalue; }
			set { m_highalarmlimituservalue = value; }
		}

		
		private int m_AlarmPriority
		{
			get { return m_alarmpriority; }
			set { m_alarmpriority = value; }
		}

		
		private int m_StatusChecking
		{
			get { return m_statuschecking; }
			set { m_statuschecking = value; }
		}

		
		private bool m_IsSoe
		{
			get { return m_issoe; }
			set { m_issoe = value; }
		}

		
		private int m_IOType
		{
			get { return m_iotype; }
			set { m_iotype = value; }
		}

		#endregion // Internal Accessors for NHibernate 

		#region Public Functions

		#endregion //Public Functions

		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			Cfg_VarSystem castObj = (Cfg_VarSystem)obj; 
			return castObj.GetHashCode() == this.GetHashCode();
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return this.GetType().FullName.GetHashCode();
				
		}
		#endregion
			}
}
