using System;
using System.Collections;


namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Meta_FCDetail
	{

		#region Private Members

		private string m_functionname; 
		private IList m_MetaFcDetailList; 
		private string m_pinname; 
		private byte m_pinindex; 
		private MetaDataType m_datatype; 
		private bool m_tune; 
		private string m_pintype; 
		private string m_maxvalue; 
		private string m_minvalue; 
		private string m_validvalue; 
		private string m_defaultvalue; 
		private bool m_required; 
		private string m_description; 
		private bool m_fixed; 
		private string m_pinsignaltype; 		
		#endregion

		#region Constuctor

		public Meta_FCDetail()
		{
			m_functionname = String.Empty; 
			m_MetaFcDetailList = new ArrayList(); 
			m_pinname = String.Empty; 
			m_pinindex = new byte(); 
			m_datatype = new MetaDataType(); 
			m_tune = false; 
			m_pintype = String.Empty; 
			m_maxvalue = String.Empty; 
			m_minvalue = String.Empty; 
			m_validvalue = String.Empty; 
			m_defaultvalue = String.Empty; 
			m_required = false; 
			m_description = String.Empty; 
			m_fixed = false; 
			m_pinsignaltype = String.Empty; 
		}

		public Meta_FCDetail(
			bool tune, 
			bool required, 
			bool fixed)
			: this()
		{
			m_functionname = String.Empty;
			m_pinname = String.Empty;
			m_pinindex = null;
			m_datatype = null;
			m_tune = tune;
			m_pintype = String.Empty;
			m_maxvalue = String.Empty;
			m_minvalue = String.Empty;
			m_validvalue = String.Empty;
			m_defaultvalue = String.Empty;
			m_required = required;
			m_description = String.Empty;
			m_fixed = fixed;
			m_pinsignaltype = String.Empty;
		}
		#endregion // End Constructor

		#region Public Properties
			
		public string FunctionName
		{
			get { return m_functionname; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for FunctionName", value, value.ToString());
				
				m_functionname = value;
			}
		}
			
		public MetaFcDetail[] MetaFcDetail
		{
			get
			{

				ArrayList readonlyarray = ArrayList.ReadOnly(new ArrayList(m_MetaFcDetailList));
				return (MetaFcDetail[]) readonlyarray.ToArray(typeof(MetaFcDetail));
			}
		}
						
		public string PinName
		{
			get { return m_pinname; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for PinName", value, value.ToString());
				
				m_pinname = value;
			}
		}
			
		public byte PinIndex
		{
			get { return m_pinindex; }

			set	
			{	
				if(  value != null &&  value.Length > 0)
					throw new ArgumentOutOfRangeException("Invalid value for PinIndex", value, value.ToString());
				
				m_pinindex = value;
			}

		}
			
		public MetaDataType DataType
		{
			get { return m_datatype; }
			set
			{
				m_datatype = value;
			}

		}
			
		public bool Tune
		{
			get { return m_tune; }
			set
			{
				m_tune = value;
			}

		}
			
		public string PinType
		{
			get { return m_pintype; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for PinType", value, value.ToString());
				
				m_pintype = value;
			}
		}
			
		public string MaxValue
		{
			get { return m_maxvalue; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for MaxValue", value, value.ToString());
				
				m_maxvalue = value;
			}
		}
			
		public string MinValue
		{
			get { return m_minvalue; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for MinValue", value, value.ToString());
				
				m_minvalue = value;
			}
		}
			
		public string ValidValue
		{
			get { return m_validvalue; }

			set	
			{	
				if(  value != null &&  value.Length > 0)
					throw new ArgumentOutOfRangeException("Invalid value for ValidValue", value, value.ToString());
				
				m_validvalue = value;
			}
		}
			
		public string DefaultValue
		{
			get { return m_defaultvalue; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for DefaultValue", value, value.ToString());
				
				m_defaultvalue = value;
			}
		}
			
		public bool Required
		{
			get { return m_required; }
			set
			{
				m_required = value;
			}

		}
			
		public string Description
		{
			get { return m_description; }

			set	
			{	
				if(  value != null &&  value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for Description", value, value.ToString());
				
				m_description = value;
			}
		}
			
		public bool Fixed
		{
			get { return m_fixed; }
			set
			{
				m_fixed = value;
			}

		}
			
		public string PinSignalType
		{
			get { return m_pinsignaltype; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for PinSignalType", value, value.ToString());
				
				m_pinsignaltype = value;
			}
		}
			
				
		#endregion 

		#region Private Accessors for NHibernate
		
		
		private string m_FunctionName
		{
			get { return m_functionname; }
			set { m_functionname = value; }
		}

		
		private string m_PinName
		{
			get { return m_pinname; }
			set { m_pinname = value; }
		}

		
		private byte m_PinIndex
		{
			get { return m_pinindex; }
			set { m_pinindex = value; }
		}

		
		private MetaDataType m_DataType
		{
			get { return m_datatype; }
			set { m_datatype = value; }
		}

		
		private bool m_Tune
		{
			get { return m_tune; }
			set { m_tune = value; }
		}

		
		private string m_PinType
		{
			get { return m_pintype; }
			set { m_pintype = value; }
		}

		
		private string m_MaxValue
		{
			get { return m_maxvalue; }
			set { m_maxvalue = value; }
		}

		
		private string m_MinValue
		{
			get { return m_minvalue; }
			set { m_minvalue = value; }
		}

		
		private string m_ValidValue
		{
			get { return m_validvalue; }
			set { m_validvalue = value; }
		}

		
		private string m_DefaultValue
		{
			get { return m_defaultvalue; }
			set { m_defaultvalue = value; }
		}

		
		private bool m_Required
		{
			get { return m_required; }
			set { m_required = value; }
		}

		
		private string m_Description
		{
			get { return m_description; }
			set { m_description = value; }
		}

		
		private bool m_Fixed
		{
			get { return m_fixed; }
			set { m_fixed = value; }
		}

		
		private string m_PinSignalType
		{
			get { return m_pinsignaltype; }
			set { m_pinsignaltype = value; }
		}

		#endregion // Internal Accessors for NHibernate 

		#region Public Functions

		public void AddMetaFcDetail(MetaFcDetail dados)
		{
			#region Sanity Check
			if (dados == null)
				throw new ArgumentNullException("dados", "Parâmetro não pode ser nulo");
			#endregion
			m_MetaFcDetailList.Add(dados);
		}
		

		#endregion //Public Functions

		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			Meta_FCDetail castObj = (Meta_FCDetail)obj; 
			return castObj.GetHashCode() == this.GetHashCode();
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return this.GetType().FullName.GetHashCode();
				
		}
		#endregion
			}
}
