using System;
using System.Collections;


namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Temp_Signal
	{

		#region Private Members

		private string m_documentname; 
		private string m_controlleraddress; 
		private string m_entitycolor; 
		private string m_entitypoint; 
		private string m_entitylayer; 
		private string m_entitybelongto; 		
		#endregion

		#region Constuctor

		public Temp_Signal()
		{
			m_documentname = String.Empty; 
			m_controlleraddress = String.Empty; 
			m_entitycolor = String.Empty; 
			m_entitypoint = String.Empty; 
			m_entitylayer = String.Empty; 
			m_entitybelongto = String.Empty; 
		}

		#region Public Properties
			
		public string DocumentName
		{
			get { return m_documentname; }

			set	
			{	
				if(  value != null &&  value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for DocumentName", value, value.ToString());
				
				m_documentname = value;
			}
		}
			
		public string ControllerAddress
		{
			get { return m_controlleraddress; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for ControllerAddress", value, value.ToString());
				
				m_controlleraddress = value;
			}
		}
			
		public string EntityColor
		{
			get { return m_entitycolor; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for EntityColor", value, value.ToString());
				
				m_entitycolor = value;
			}
		}
			
		public string EntityPoint
		{
			get { return m_entitypoint; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for EntityPoint", value, value.ToString());
				
				m_entitypoint = value;
			}
		}
			
		public string EntityLayer
		{
			get { return m_entitylayer; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for EntityLayer", value, value.ToString());
				
				m_entitylayer = value;
			}
		}
			
		public string EntityBelongTo
		{
			get { return m_entitybelongto; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for EntityBelongTo", value, value.ToString());
				
				m_entitybelongto = value;
			}
		}
			
				
		#endregion 

		#region Private Accessors for NHibernate
		
		
		private string m_DocumentName
		{
			get { return m_documentname; }
			set { m_documentname = value; }
		}

		
		private string m_ControllerAddress
		{
			get { return m_controlleraddress; }
			set { m_controlleraddress = value; }
		}

		
		private string m_EntityColor
		{
			get { return m_entitycolor; }
			set { m_entitycolor = value; }
		}

		
		private string m_EntityPoint
		{
			get { return m_entitypoint; }
			set { m_entitypoint = value; }
		}

		
		private string m_EntityLayer
		{
			get { return m_entitylayer; }
			set { m_entitylayer = value; }
		}

		
		private string m_EntityBelongTo
		{
			get { return m_entitybelongto; }
			set { m_entitybelongto = value; }
		}

		#endregion // Internal Accessors for NHibernate 

		#region Public Functions

		#endregion //Public Functions

		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			Temp_Signal castObj = (Temp_Signal)obj; 
			return castObj.GetHashCode() == this.GetHashCode();
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return this.GetType().FullName.GetHashCode();
				
		}
		#endregion
			}
}
